?nrow
?read.table
swirl
use(swirl)
swirl()
library(swirl)
swirl()
quit
bye
info
info()
bye()
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
library(swirl)
swirl()
boring_function
submit()
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate( function(x){x[1]}, c(8,4,0))
evaluate( function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming","is","fun!")
submit()
telegram("hello","there")
submit()
submit()
submit()
mad_libs(place="home",noun="car",adjective="fast")
submit()
"I" %p% "love" %p% "R!"
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flags_colors <- flags[, 11:17]
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[, 19:23]
lapply(flag_shapes,range)
shape_map<-sapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals<-lapply(flags,unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
bye
bye()
cwd
pwd
quit
library(xlsx)
gewd
getwd()
setwd("datasciencecoursera")
setwd("Quiz3.1")
dir()
read.xlsx(file="NGAP.xlsx",sheetIndex=1,rowIndex=18:23,colIndex=7:15)
dat<-read.xlsx(file="NGAP.xlsx",sheetIndex=1,rowIndex=18:23,colIndex=7:15)
sum(dat$Zip*dat$Ext,na.rm=T)
sum(dat$Zip*dat$Ext,na.rm=T)
download.file(url="https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml",destfile="restaurants.xml",method="curl")
install.packages("XML")
file<-"./restaurants.xml"
library(XML)
doc<0=-xmlTreeParse(file,useInternal="TRUE")
doc<-xmlTreeParse(file,useInternal="TRUE")
dir
dir()
doc<-xmlTreeParse(file=file,useInternalNodes =TRUE)
rootname<-xmlRoot(doc)
xmlName(rootname)
names(rootname)
rootname[[1]]
rootname[[1]][[3]]
zips<-xmlSApply(rootname,"//zipcode",xmlValue)
zips<-xpathSApply(rootname,"//zipcode",xmlValue)
zips
zips[zips==21231]
length(zips[zips==21231])
URI<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(URI,destfile="getdata.csv",method="curl")
library(data.table)
t<-fread("getdata.csv")
head(t)
class(t)
DT<-fread("getdata.csv")
rm(t)
rm(dat)
DT[,mean(pwgtp15),by=SEX]
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)))
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
system.time({mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))})
system.time(mean(DT[DT$SEX==1,]$pwgtp15))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
getwd
getwd()
source("benchmark.R")
source("benchmark.R")
source("benchmark.R")
source("benchmark.R")
?system.time
source("benchmark.R")
source("benchmark.R")
source("benchmark.R")
require(stats)
source("benchmark.R")
source("benchmark.R")
source("benchmark.R")
?proc.time
source("benchmark.R")
source("benchmark.R")
source("benchmark.R")
source("benchmark.R")
source("benchmark.R")
swirl()
library(swirl)
swirl()
swirl()
install.packages("httpr")
install.packages("httr")
install.packages("httr")
install.packages("httr")
library(httr)
library("httr")
